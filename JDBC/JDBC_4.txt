+ Refresh == 일정시간 이후 자동으로 Server에 요청을 보내는 방법1
 - [회원등록] 화면에서, Add 버튼으로 전송하면? 1초 후 자동으로 Server에 [회원목록] 요청하도록 하자.
   = out.println("</body></html>");
   = response.addHeader("Refresh", "1;url=list");	// 응답 헤더에 Refresh 명령 추가함.
   = Charles를 실행하고, Tomcat v7.0 Server ==> Restart
 - http://localhost:9999/web04/member/add ==> 추가하면? 1초 후에 [회원목록] 화면으로 이동한다.
   = Charles에서 Response 살펴보면? Refresh: 1;url=list 추가된 것 확인할 수 있다.

+ Refresh == 일정시간 이후 자동으로 Server에 요청을 보내는 방법2
 - HTML의 <head> <meta> </head> 태그를 이용한 Refresh
   = out.println("<meta http-equiv='Refresh' content='1; url=list'>");

+ Refresh vs. Redirect
 - Refresh  == 회원정보 추가 요청 후, 그 결과를 출력하고 나서 회원목록으로 이동하는 것.
 - Redirect == 회원정보 추가 요청 후, 그 결과를 출력하지 않고 회원목록으로 이동하는 것.
 - 잠깐이나마 작업결과를 출력하고 다른 페이지로 이동하기를 원한다면? Refresh.
 - 작업 결과를 출력하지 않고 즉시 다른 페이지로 이동하기를 원한다면? Redirect.
   = stmt.executeUpdate();
   = response.sendRedirect("list");	// Redirect == 이하 HTML을 출력하지 않는다 == continue;
   = response.setContentType("text/html; charset=UTF-8");	// 여기부터 모든 HTML을 주석처리하라.
 - Redirect == 이하 HTML 코드를 Client로 보내지 않습니다. 이하 HTML을 작성해도 보내지 않습니다.
 - Redirect == 응답 상태 코드 == 302 == Location 헤더의 주소로 다시금 이동하라!는 뜻.
 - Location == 이동할 페이지의 URL이 들어 있습니다.

+ Servlet 초기화 매개변수? == DB 연결 정보의 분리
 - Servlet을 생성하고 초기화할 때 Servlet Container가 전달하는 Data 
 - Servlet의  init()을  호출할 때 Servlet Container가 전달하는 Data
 - 보통 DB 연결 정보같은 정적인 Data를 Servlet에 전달할 때 사용한다.
   = com.mysql.jdbc.Driver
   = jdbc:mysql://localhost/studydb
   = username
   = passowrd
 - @어노테이션을 사용하여 서블릿 소스코드에서 설정하거나,
 - web.xml DD 파일의 서블릿 배치 정보에서 Servlet 초기화 매개변수를 설정합니다.
   = 소스코드에서 분리된 외부 파일 web.xml에서 설정하는 방법을 추천합니다.

+ 회원 상세정보 조회와 변경
 - 1. /member/list를 GET 요청합니다.
 - 2. MemberListServlet의 목록에서 Name을 클릭하면, 상세 정보를 요청합니다.
 - 3. MemberUpdateServlet은 수정된 회원 정보를 /member/update에 POST 요청합니다.
 - 4. MemberUpdateServlet은 변경된 회원 정보를 Web Browser에게 출력합니다.

+ MemberListServlet.java
package spms.servlets;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebServlet;
@WebServlet("/member/list")
public class MemberListServlet extends GenericServlet {
	private static final long serialVersionUID = 1L;

	@Override
	public void service(ServletRequest request, ServletResponse response)
			throws ServletException, IOException {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;

		try {
			DriverManager.registerDriver(new com.mysql.jdbc.Driver());
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost/studydb", //JDBC URL
					"study",	// DBMS 사용자 아이디
					"study");	// DBMS 사용자 암호
			stmt = conn.createStatement();
			rs = stmt.executeQuery(
					"SELECT MNO,MNAME,EMAIL,CRE_DATE" + 
					" FROM MEMBERS" +
					" ORDER BY MNO ASC");
			
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.println("<html><head><title>회원목록</title></head>");
			out.println("<body><h1>회원목록</h1>");
			out.println("<p><a href='add'>신규 회원</a></p>");
			while(rs.next()) {
				out.println(
					rs.getInt("MNO") + "," +
					"<a href='update?no=" + rs.getInt("MNO") + "'>" +
					rs.getString("MNAME") + "</a>," +
					rs.getString("EMAIL") + "," + 
					rs.getDate("CRE_DATE") + "<br>"
				);
			}
			out.println("</body></html>");
		} catch (Exception e) {
			throw new ServletException(e);
			
		} finally {
			try {if (rs != null) rs.close();} catch(Exception e) {}
			try {if (stmt != null) stmt.close();} catch(Exception e) {}
			try {if (conn != null) conn.close();} catch(Exception e) {}
		}

	}
}
 - "<a href='update?no=" + rs.getInt("MNO") + "'>" 
 - 상세 정보를 보기 위해서는? 회원 번호가 필요함.

+ web.xml 파일에 MemberUpdateServlet 배치 정보를 작성합니다.
 - 소스파일 밖에 DB 정보를 두면? DB 정보가 바뀌더라도 web.xml 파일만 편집하면 된다. 유지보수 좋다.
 - 이처럼 변하기 쉬운 값들은? *.xml 또는 .properties에 두어 관리한다.
 - # vi web04/WebContent/WEB-INF/web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
		http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>web04</display-name>
	
	<servlet>
		<servlet-name>MemberUpdateServlet</servlet-name>
		<servlet-class>spms.servlets.MemberUpdateServlet</servlet-class>
		<init-param>
			<param-name>driver</param-name>
			<param-value>com.mysql.jdbc.Driver</param-value>	// this.getInitParameter("driver")
		</init-param>
		<init-param>
			<param-name>url</param-name>
			<param-value>jdbc:mysql://localhost/studydb</param-value>
		</init-param>
		<init-param>
			<param-name>username</param-name>
			<param-value>study</param-value>
		</init-param>
		<init-param>
			<param-name>password</param-name>
			<param-value>study</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>MemberUpdateServlet</servlet-name>
		<url-pattern>/member/update</url-pattern>
	</servlet-mapping> 

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>

+ MemberUpdateServlet.java
package spms.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@SuppressWarnings("serial")
/* 애노테이션을 이용하여 서블릿 배치 정보 설정
 * - 서블릿 초기화 파라미터
 * - 서블릿 초기화 파라미터도 애노테이션으로 처리 
 * - web.xml 파일에서 아래에 해당되는 정보를 지우고, 아래의 주석을 풀어주어도 결국 효과는 같다.
@WebServlet(
  urlPatterns={"/member/update"},
  initParams={
	  @WebInitParam(name="driver",value="com.mysql.jdbc.Driver"),
	  @WebInitParam(name="url",value="jdbc:mysql://localhost/studydb"),
	  @WebInitParam(name="username",value="study"),
	  @WebInitParam(name="password",value="study")
  }
)
*/
public class MemberUpdateServlet extends HttpServlet {
	@Override
	protected void doGet(
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			Class.forName(this.getInitParameter("driver"));	// == com.mysql.jdbc.Driver
			conn = DriverManager.getConnection(
						this.getInitParameter("url"),
						this.getInitParameter("username"),
						this.getInitParameter("password")); 
			stmt = conn.createStatement();
			rs = stmt.executeQuery(
				"SELECT MNO,EMAIL,MNAME,CRE_DATE FROM MEMBERS" + 
				" WHERE MNO=" + request.getParameter("no"));	
			rs.next();
			
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.println("<html><head><title>회원정보</title></head>");
			out.println("<body><h1>회원정보</h1>");
			out.println("<form action='update' method='post'>");
			out.println("번호: <input type='text' name='no' value='" +
				request.getParameter("no") + "' readonly><br>");
			out.println("이름: <input type='text' name='name'" +
				" value='" + rs.getString("MNAME")  + "'><br>");
			out.println("이메일: <input type='text' name='email'" +
				" value='" + rs.getString("EMAIL")  + "'><br>");
			out.println("가입일: " + rs.getDate("CRE_DATE") + "<br>");
			out.println("<input type='submit' value='저장'>");
			out.println("<input type='button' value='취소'" + 
				" onclick='location.href=\"list\"'>");
			out.println("</form>");
			out.println("</body></html>");
			
		} catch (Exception e) {
			throw new ServletException(e);
			
		} finally {
			try {if (rs != null) rs.close();} catch(Exception e) {}
			try {if (stmt != null) stmt.close();} catch(Exception e) {}
			try {if (conn != null) conn.close();} catch(Exception e) {}
		}
	}
	
	@Override
	protected void doPost(
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			Class.forName(this.getInitParameter("driver"));
			conn = DriverManager.getConnection(
						this.getInitParameter("url"),
						this.getInitParameter("username"),
						this.getInitParameter("password")); 
			stmt = conn.prepareStatement(
					"UPDATE MEMBERS SET EMAIL=?,MNAME=?,MOD_DATE=now()"
					+ " WHERE MNO=?");
			stmt.setString(1, request.getParameter("email"));
			stmt.setString(2, request.getParameter("name"));
			stmt.setInt(3, Integer.parseInt(request.getParameter("no")));
			stmt.executeUpdate();
			
			response.sendRedirect("list");
			
		} catch (Exception e) {
			throw new ServletException(e);
			
		} finally {
			try {if (stmt != null) stmt.close();} catch(Exception e) {}
			try {if (conn != null) conn.close();} catch(Exception e) {}
		}
	}
}

+ MemberAddServlet.java
package spms.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/member/add")
public class MemberAddServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		response.setContentType("text/html; charset=UTF-8");
		PrintWriter out = response.getWriter();
		out.println("<html><head><title>회원 등록</title></head>");
		out.println("<body><h1>회원 등록</h1>");
		out.println("<form action='add' method='post'>");
		out.println("이름: <input type='text' name='name'><br>");
		out.println("이메일: <input type='text' name='email'><br>");
		out.println("암호: <input type='password' name='password'><br>");
		out.println("<input type='submit' value='추가'>");
		out.println("<input type='reset' value='취소'>");
		out.println("</form>");
		out.println("</body></html>");
	}
	
	@Override
	protected void doPost(
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			DriverManager.registerDriver(new com.mysql.jdbc.Driver());
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost/studydb", //JDBC URL
					"study",	// DBMS 사용자 아이디
					"study");	// DBMS 사용자 암호
			stmt = conn.prepareStatement(
					"INSERT INTO MEMBERS(EMAIL,PWD,MNAME,CRE_DATE,MOD_DATE)"
					+ " VALUES (?,?,?,NOW(),NOW())");
			stmt.setString(1, request.getParameter("email"));
			stmt.setString(2, request.getParameter("password"));
			stmt.setString(3, request.getParameter("name"));
			stmt.executeUpdate();
			
			// 리다이렉트를 이용한 리프래시
			response.sendRedirect("list");
			
		} catch (Exception e) {
			throw new ServletException(e);
			
		} finally {
			try {if (stmt != null) stmt.close();} catch(Exception e) {}
			try {if (conn != null) conn.close();} catch(Exception e) {}
		}

	}
}
